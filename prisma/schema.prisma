generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views", "driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model expenses {
  id             String           @id @default(dbgenerated("(gen_random_uuid())::text"))
  title          String
  price          Decimal          @db.Decimal(10, 2)
  user_id        String
  image_url      String?
  house_id       String
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  currency       String           @default("TRY")
  split_type     split_type_enum  @default(equal)
  expense_splits expense_splits[]
  houses         houses           @relation(fields: [house_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users          users            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model house_users {
  id         String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  house_id   String?
  user_id    String?
  created_at DateTime @default(now()) @db.Timestamp(6)
  houses     houses?  @relation(fields: [house_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users?   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([house_id, user_id])
}

model houses {
  id          String        @id @default(dbgenerated("(gen_random_uuid())::text"))
  title       String
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  code        String        @unique @default(dbgenerated("substr(encode(gen_random_bytes(4), 'base64'::text), 1, 8)")) @db.VarChar(6)
  expenses    expenses[]
  house_users house_users[]
  payments    payments[]
}

model users {
  id                                   String           @id @default(dbgenerated("(gen_random_uuid())::text"))
  full_name                            String?
  email                                String           @unique
  username                             String?
  avatar_url                           String?
  created_at                           DateTime         @default(now()) @db.Timestamp(6)
  expense_splits                       expense_splits[]
  expenses                             expenses[]
  house_users                          house_users[]
  payments_payments_payer_idTousers    payments[]       @relation("payments_payer_idTousers")
  payments_payments_receiver_idTousers payments[]       @relation("payments_receiver_idTousers")
}

model expense_splits {
  id         String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  expense_id String
  user_id    String
  amount     Decimal  @db.Decimal(10, 2)
  expenses   expenses @relation(fields: [expense_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model payments {
  id                                String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  payer_id                          String
  receiver_id                       String
  amount                            Decimal  @db.Decimal(10, 2)
  house_id                          String
  created_at                        DateTime @default(now()) @db.Timestamp(6)
  currency                          String   @default("TRY")
  houses                            houses   @relation(fields: [house_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_payments_payer_idTousers    users    @relation("payments_payer_idTousers", fields: [payer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_payments_receiver_idTousers users    @relation("payments_receiver_idTousers", fields: [receiver_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

view user_balances {
  id       BigInt   @unique
  house_id String?
  debtor   String?
  creditor String?
  amount   Decimal? @db.Decimal
}

enum split_type_enum {
  equal
  custom
  percentage
}
